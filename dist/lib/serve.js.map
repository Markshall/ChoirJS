{"version":3,"sources":["../../lib/serve.js"],"names":["Serve","directories","route","registry","register","i","length","name","regex","test","RegExp","add","get","on","req","res","file","url","replace","fs","readFile","err","data","notFound","header","setHeader","mime","getType","send"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;AAAyB;;AAEzB;;;;IAIqBA,K;;;AACnB,iBAAYC,WAAZ,EAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;AAAA;;AACxC,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AAEA,SAAKC,QAAL;AACD;;;;+BAEU;AACT,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,WAAL,CAAiBK,MAArC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;AACnD;;;;AAIA,YAAIE,IAAI,GAAG,IAAX,CALmD,CAKlC;;AACjB,YAAIC,KAAK,GAAG,IAAZ;;AACA,YAAI,WAAWC,IAAX,CAAgB,KAAKR,WAAL,CAAiBI,CAAjB,CAAhB,CAAJ,EAA0C;AACxCE,UAAAA,IAAI,GAAG,KAAKN,WAAL,CAAiBI,CAAjB,CAAP;AACAG,UAAAA,KAAK,GAAG,IAAIE,MAAJ,aAAgB,KAAKT,WAAL,CAAiBI,CAAjB,CAAhB,qBAAR;AACD,SAHD,MAGO;AACLE,UAAAA,IAAI,GAAG,KAAKN,WAAL,CAAiBI,CAAjB,CAAP;AACAG,UAAAA,KAAK,GAAGD,IAAR;AACD;;AAED,aAAKJ,QAAL,CAAcQ,GAAd,CAAkBH,KAAlB,EAAyBD,IAAzB;AACA,aAAKL,KAAL,CAAWU,GAAX,CAAeC,EAAf,CAAkBN,IAAlB,EAAwB,UAACO,GAAD,EAAMC,GAAN,EAAc;AACpC;;;;AAIA,cAAMC,IAAI,GAAGF,GAAG,CAACG,GAAJ,CAAQC,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAb;;AACAC,yBAAGC,QAAH,CAAYJ,IAAZ,EAAkB,UAACK,GAAD,EAAMC,IAAN,EAAe;AAC/B,gBAAID,GAAJ,EAAS;AACPN,cAAAA,GAAG,CAACQ,QAAJ;AACD,aAFD,MAEO;AACLR,cAAAA,GAAG,CAACS,MAAJ,CAAWC,SAAX,CAAqB,cAArB,EAAqCC,iBAAKC,OAAL,CAAaX,IAAb,CAArC;AACAD,cAAAA,GAAG,CAACa,IAAJ,CAASN,IAAT;AACD;AACF,WAPD;AAQD,SAdD;AAeD;AACF","sourcesContent":["import fs from 'fs';\n\nimport mime from 'mime'; // https://www.npmjs.com/package/mime\n\n/*\n * Serve static files in directories.\n * There might be a better way to do this. Feel free to update this.\n */\nexport default class Serve {\n  constructor(directories, route, registry) {\n    this.directories = directories;\n    this.route = route;\n    this.registry = registry;\n\n    this.register();\n  }\n\n  register() {\n    for (let i = 0; i < this.directories.length; i += 1) {\n      /*\n       * Check if the entry is a directory or not via regex.\n       * ^(.*)\\/$\n       */\n      let name = null; // Name of the route;\n      let regex = null;\n      if (/^(.*)\\/$/.test(this.directories[i])) {\n        name = this.directories[i];\n        regex = new RegExp(`^(${this.directories[i]})((?!.*\\\\.\\\\.))`);\n      } else {\n        name = this.directories[i];\n        regex = name;\n      }\n\n      this.registry.add(regex, name);\n      this.route.get.on(name, (req, res) => {\n        /*\n         * Replace the first instance of \"/\" in req.url\n         * so that fs won't think to look for file from root.\n         */\n        const file = req.url.replace('/', '');\n        fs.readFile(file, (err, data) => {\n          if (err) {\n            res.notFound();\n          } else {\n            res.header.setHeader('Content-Type', mime.getType(file));\n            res.send(data);\n          }\n        });\n      });\n    }\n  }\n}\n"],"file":"serve.js"}