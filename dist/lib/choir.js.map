{"version":3,"sources":["../../lib/choir.js"],"names":["Choir","port","core","Events","route","Route","registry","Registry","serve","template","name","directory","callback","server","http","createServer","bind","listen","Serve","emit","push","req","res","header","Header","routeCheck","check","url","error","notFound","params","exec","i","middleware","length","next","method","post","get","writeHead"],"mappings":"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","sourcesContent":["import http from 'http';\n\nimport Events from 'events';\n\nimport Mixin from 'merge-descriptors';\n\nimport Route from './route';\n\nimport Response from './response';\n\nimport Header from './header';\n\nimport Registry from './registry';\n\nimport Serve from './serve';\n\nexport default class Choir {\n  constructor(port) {\n    this.core = new Events(); // Core Event\n    this.route = new Route(); // Route Events\n\n    this.registry = new Registry();\n    this.serve = [];\n    this.template = {\n      name: null,\n      directory: null,\n      callback: null,\n    };\n\n    const server = http.createServer(this.server.bind(this));\n    server.listen(port, this.listen.bind(this));\n  }\n\n  listen() {\n    const serve = new Serve(this.serve, this.route, this.registry);\n    this.core.emit('start');\n  }\n\n  files(directory) {\n    this.serve.push(directory);\n  }\n\n  engine(name, directory, callback) {\n    this.template.name = name;\n    this.template.directory = directory;\n    this.template.callback = callback;\n  }\n\n  server(req, res) {\n    res.header = new Header();\n    res.template = this.template; // Adding the template object to response.\n    Mixin(res, Response(res)); // Merge NodeJS's http response with a few extra functions.\n    /*\n     * Run a check against the route registry.\n     */\n    const routeCheck = this.registry.check(req.url);\n    if (routeCheck.error) {\n      res.notFound();\n    } else {\n      req.params = routeCheck.exec;\n\n      /*\n       * Run middlewares first.\n       */\n      let i = 0;\n      if (routeCheck.middleware.length > 0) {\n        const next = () => {\n          i += 1;\n          if (i < routeCheck.middleware.length) {\n            routeCheck.middleware[i](req, res, next);\n          }\n        };\n        routeCheck.middleware[i](req, res, next);\n      }\n\n      /*\n       * If all the middleware is ran, proceed to main course.\n       */\n      if (i === routeCheck.middleware.length) {\n        switch (req.method) {\n          case 'POST':\n            this.route.post.emit(routeCheck.route, req, res);\n            break;\n\n          case 'GET':\n            this.route.get.emit(routeCheck.route, req, res);\n            break;\n\n          default:\n            res.writeHead(404);\n            break;\n        }\n      }\n    }\n  }\n}\n"],"file":"choir.js"}