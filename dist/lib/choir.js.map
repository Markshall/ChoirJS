{"version":3,"sources":["../../lib/choir.js"],"names":["Choir","port","core","Events","route","Route","middleware","Middleware","registry","Registry","serve","globalMiddleware","template","name","directory","callback","app","http","createServer","server","bind","listen","Serve","emit","push","req","res","header","Header","routeCheck","check","url","error","notFound","params","exec","handleRequest","run"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;;IAEqBA,K;;;AACnB,iBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKC,IAAL,GAAY,IAAIC,kBAAJ,EAAZ,CADgB,CACU;;AAC1B,SAAKC,KAAL,GAAa,IAAIC,iBAAJ,EAAb,CAFgB,CAEU;;AAC1B,SAAKC,UAAL,GAAkB,IAAIC,sBAAJ,EAAlB;AAEA,SAAKC,QAAL,GAAgB,IAAIC,oBAAJ,EAAhB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,QAAL,GAAgB;AACdC,MAAAA,IAAI,EAAE,IADQ;AAEdC,MAAAA,SAAS,EAAE,IAFG;AAGdC,MAAAA,QAAQ,EAAE;AAHI,KAAhB;AAMA,SAAKC,GAAL,GAAWC,iBAAKC,YAAL,CAAkB,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAlB,CAAX;AACA,SAAKJ,GAAL,CAASK,MAAT,CAAgBpB,IAAhB,EAAsB,KAAKoB,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAtB;AACD;;;;6BAEQ;AACP,UAAMV,KAAK,GAAG,IAAIY,iBAAJ,CAAU,KAAKZ,KAAf,EAAsB,KAAKN,KAA3B,EAAkC,KAAKI,QAAvC,CAAd;AACA,WAAKN,IAAL,CAAUqB,IAAV,CAAe,OAAf;AACD;;;0BAEKT,S,EAAW;AACf,WAAKJ,KAAL,CAAWc,IAAX,CAAgBV,SAAhB;AACD;;;2BAEMD,I,EAAMC,S,EAAWC,Q,EAAU;AAChC,WAAKH,QAAL,CAAcC,IAAd,GAAqBA,IAArB;AACA,WAAKD,QAAL,CAAcE,SAAd,GAA0BA,SAA1B;AACA,WAAKF,QAAL,CAAcG,QAAd,GAAyBA,QAAzB;AACD;;;2BAEMU,G,EAAKC,G,EAAK;AACfA,MAAAA,GAAG,CAACC,MAAJ,GAAa,IAAIC,kBAAJ,EAAb;AACAF,MAAAA,GAAG,CAACd,QAAJ,GAAe,KAAKA,QAApB,CAFe,CAEe;;AAC9B,wCAAMc,GAAN,EAAW,0BAASA,GAAT,CAAX,EAHe,CAGY;;AAC3B;;;;AAGA,UAAMG,UAAU,GAAG,KAAKrB,QAAL,CAAcsB,KAAd,CAAoBL,GAAG,CAACM,GAAxB,CAAnB;;AACA,UAAIF,UAAU,CAACG,KAAf,EAAsB;AACpBN,QAAAA,GAAG,CAACO,QAAJ;AACD,OAFD,MAEO;AACLR,QAAAA,GAAG,CAACS,MAAJ,GAAaL,UAAU,CAACM,IAAxB;AACA,aAAKC,aAAL,CAAmBP,UAAnB,EAA+BJ,GAA/B,EAAoCC,GAApC;AACD;AACF;;;kCAEaG,U,EAAYJ,G,EAAKC,G,EAAK;AAClC;;;AAGA,WAAKpB,UAAL,CAAgB+B,GAAhB,CAAoBZ,GAApB,EAAyBC,GAAzB,EAA8B,KAAKtB,KAAnC,EAA0CyB,UAA1C;AACD","sourcesContent":["import http from 'http';\n\nimport Events from 'events';\n\nimport Mixin from 'merge-descriptors';\n\nimport Route from './route';\n\nimport Response from './response';\n\nimport Header from './header';\n\nimport Registry from './registry';\n\nimport Serve from './serve';\n\nimport Middleware from './middleware';\n\nexport default class Choir {\n  constructor(port) {\n    this.core = new Events(); // Core Event\n    this.route = new Route(); // Route Events\n    this.middleware = new Middleware();\n\n    this.registry = new Registry();\n    this.serve = [];\n    this.globalMiddleware = [];\n    this.template = {\n      name: null,\n      directory: null,\n      callback: null,\n    };\n\n    this.app = http.createServer(this.server.bind(this));\n    this.app.listen(port, this.listen.bind(this));\n  }\n\n  listen() {\n    const serve = new Serve(this.serve, this.route, this.registry);\n    this.core.emit('start');\n  }\n\n  files(directory) {\n    this.serve.push(directory);\n  }\n\n  engine(name, directory, callback) {\n    this.template.name = name;\n    this.template.directory = directory;\n    this.template.callback = callback;\n  }\n\n  server(req, res) {\n    res.header = new Header();\n    res.template = this.template; // Adding the template object to response.\n    Mixin(res, Response(res)); // Merge NodeJS's http response with a few extra functions.\n    /*\n     * Run a check against the route registry.\n     */\n    const routeCheck = this.registry.check(req.url);\n    if (routeCheck.error) {\n      res.notFound();\n    } else {\n      req.params = routeCheck.exec;\n      this.handleRequest(routeCheck, req, res);\n    }\n  }\n\n  handleRequest(routeCheck, req, res) {\n    /*\n     * Run route middlewares.\n     */\n    this.middleware.run(req, res, this.route, routeCheck);\n  }\n}\n"],"file":"choir.js"}