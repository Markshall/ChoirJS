{"version":3,"sources":["../../lib/choir.js"],"names":["Choir","port","core","Events","route","Route","registry","Registry","serve","globalMiddleware","template","name","directory","callback","app","http","createServer","server","bind","listen","Serve","emit","push","middleware","Array","isArray","concat","req","res","header","Header","routeCheck","check","url","error","notFound","params","exec","headers","handleFormRequest","body","handleRequest","on","data","globalMiddlewareCheck","Middleware","run","routeMiddlewareCheck","length","method","post","get","put","options","writeHead"],"mappings":"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","sourcesContent":["import http from 'http';\n\nimport Events from 'events';\n\nimport Mixin from 'merge-descriptors';\n\nimport Route from './route';\n\nimport Response from './response';\n\nimport Header from './header';\n\nimport Registry from './registry';\n\nimport Serve from './serve';\n\nimport Middleware from './middleware';\n\nexport default class Choir {\n  constructor(port) {\n    this.core = new Events(); // Core Event\n    this.route = new Route(); // Route Events\n\n    this.registry = new Registry();\n    this.serve = [];\n    this.globalMiddleware = [];\n    this.template = {\n      name: null,\n      directory: null,\n      callback: null,\n    };\n\n    this.app = http.createServer(this.server.bind(this));\n    this.app.listen(port, this.listen.bind(this));\n  }\n\n  listen() {\n    const serve = new Serve(this.serve, this.route, this.registry);\n    this.core.emit('start');\n  }\n\n  files(directory) {\n    this.serve.push(directory);\n  }\n\n  /*\n   * Global middleware.\n   * middleware: accepts array or function.\n   */\n  middleware(middleware) {\n    if (Array.isArray(middleware)) {\n      this.globalMiddleware.concat(middleware);\n    } else {\n      this.globalMiddleware.push(middleware);\n    }\n  }\n\n  engine(name, directory, callback) {\n    this.template.name = name;\n    this.template.directory = directory;\n    this.template.callback = callback;\n  }\n\n  server(req, res) {\n    res.header = new Header();\n    res.template = this.template; // Adding the template object to response.\n    Mixin(res, Response(res)); // Merge NodeJS's http response with a few extra functions.\n    /*\n     * Run a check against the route registry.\n     */\n    const routeCheck = this.registry.check(req.url);\n    if (routeCheck.error) {\n      res.notFound();\n    } else {\n      req.params = routeCheck.exec;\n      if (req.headers['content-type'] === 'application/x-www-form-urlencoded') {\n        this.handleFormRequest(routeCheck, req, res);\n      } else {\n        req.body = null;\n        this.handleRequest(routeCheck, req, res);\n      }\n    }\n  }\n\n  handleFormRequest(routeCheck, req, res) {\n    let body = '';\n    req.on('data', (data) => {\n      body += data;\n    });\n\n    req.on('end', () => {\n      req.body = body;\n      this.handleRequest(routeCheck, req, res);\n    });\n  }\n\n  handleRequest(routeCheck, req, res) {\n    /*\n       * Run global middlewares first.\n       */\n    const globalMiddlewareCheck = Middleware.run(this.globalMiddleware, req, res);\n\n    /*\n     * Run route middlewares.\n     */\n    const routeMiddlewareCheck = (globalMiddlewareCheck === this.globalMiddleware.length)\n      ? Middleware.run(routeCheck.middleware, req, res) : 0;\n\n    /*\n     * If all the middleware is ran, proceed to main course.\n     */\n    if (routeMiddlewareCheck === routeCheck.middleware.length) {\n      switch (req.method) {\n        case 'POST':\n          this.route.post.emit(routeCheck.route, req, res);\n          break;\n\n        case 'GET':\n          this.route.get.emit(routeCheck.route, req, res);\n          break;\n\n        case 'PUT':\n          this.route.put.emit(routeCheck.route, req, res);\n          break;\n\n        case 'DELETE':\n          this.route.delete.emit(routeCheck.route, req, res);\n          break;\n\n        case 'OPTIONS':\n          this.route.options.emit(routeCheck.route, req, res);\n          break;\n\n        default:\n          res.writeHead(404);\n          break;\n      }\n    }\n  }\n}\n"],"file":"choir.js"}